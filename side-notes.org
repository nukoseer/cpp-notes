** Unspecified Behaviour
 In C and C++, ~unspecified behaviour~ indicates that compilers are not required to generate the same code from the same source in some contexts. Having ~unspecied behaviour~ code is not harmful as long as the meaning of the code does not change depending on it.

*** Evalulation order of subexpressions
 The evaluation order of the subexpressions is unspecified in C and C++. Operator precedence does not determine the order of evaluation. 
 In this code, we cannot assume that ~f2()~ will be called before ~f1()~ (or vise versa) because it is ~unspecified behaviour~. ~f2()~ or ~f1()~ may be called first and we cannot rely on it:
 #+BEGIN_SRC C++
   int a = f1() * (f2() * 5);
 #+END_SRC
 Normally, this code is okay but if you assume, for example, ~f2()~ always will be called first and your code logic is rely on it, then it is a problem.

*** Addresses of same string literals
 In C and C++, if we use the same string literals in multiple places, there is no guarantee that they will be stored in the same address. 
 In the following code, we cannot assume that ~p1~ and ~p2~ are stored in the same address, even though they are the same string literal:
 #+BEGIN_SRC C++
   const char* p1 = "example";
   const char* p2 = "example";

   if (p1 == p2)
   {
       // ...
   }
 #+END_SRC
 The compiler may decide to store only one of them, in which case ~p1~ and ~p2~ will be the same address, but we cannot assume that the compiler will do this because it is an ~unspecified behaviour~. The compiler can do whatever it wants, depending on the situation. For example, it may decide to store one pair of equal string literals at the same address but for a different pair it may not.

** Implementation-defined Behaviour
 ~Implementation-defined behaviour~ is a sub category of  ~unspecified behaviour~. The only difference is that if something is ~implementation defined behaviour~, the compiler has to document it. In this case, we can assume that the compiler will produce the same result for the same code, but it may be different across different compilers.

*** The storage size of the arithmetic types
 The storage size of the arithmetic types is ~implementation defined~. For example, we ofthen assume that the storage size of ~int~ is ~4 bytes~, but it doesn't have to be. Depending on the compiler/platform, it can be ~2~, ~4~, ~8~ or more bytes. If we build the code and see that ~int~ is ~4 bytes~, it will always be ~4 bytes~ regardless of the specific code (assuming the compiler settings do not change).

*** Char types
 There are actually 3 char types in C and C++.
  - ~char~
  - ~signed char~
  - ~unsigned char~
 We cannot assume that the ~char~ type is ~unsigned char~ or ~signed char~ because it is ~implementation defined behaviour~. The ~char~ type in my compiler may be ~unsigned char~ but it may be ~signed char~ in a different compiler. Most of the compilers have a command-line option to set it.

*** Bitwise right shift
 If the left operand of the bitwise right shift operator is one of the signed integer types and is negative, the filling bits can be either 0 bits or 1 bits because it is ~implementation defined behaviour~. The compiler may or may not generate code for the ~sign extension~.

** Sequence point
 A sequence point is a code point (in the source file) at which all side effects prior to this code point must be completed at this point. Sequence points are only relevant at compile-time, not run-time.
 For example, ~prefix ++ operator~ has the side effect of incrementing its operand by 1, which is completed after a sequence point is passed:
 #+BEGIN_SRC C++
   int x = 10;
   ++x;
   // ------------------------------- sequence point
   int y = x; // y = 11;
 #+END_SRC
 Reusing an object affected by a side effect before any sequence point is undefined behavior but some rules are different between C and C++.
 This code has an undefined behaviour:
 #+BEGIN_SRC C++
   int x = 10;
   int y = ++x + x; // This is UB, because ++x has a side effect and we use x again in the same expression before any sequence point.
 #+END_SRC
 
*** List of sequence points
 Sequence points in the C language:
  - End of the statement
     #+BEGIN_SRC C++
       int x = 10;
       ++x;
       int y = x;
     #+END_SRC
  - Comma in declarations
     #+BEGIN_SRC C++
       int x = 5, y = ++x, z = y + x; // x = 5, y = 6, z = 6 + 6
     #+END_SRC
  - After the expressions in ~if (expr)~, ~while (expr)~, ~do while (expr)~, ~switch (expr)~
     #+BEGIN_SRC C++
       int x = 10;
       if (x++ > 9)
       {
           f(x); // f(x) is guaranteed to be called with 11.
       }
     #+END_SRC
  - After each of the expressions in for-statement (initialization, condition, and increment) ~for (initialization; condition; increment)~
  - After each argument in function calls
     #+BEGIN_SRC C++
       int x = 10;
       int y = 20;
       f(x++, x + y); // There are sequence points after the evaluation of each function argument. f(10, 31)
     #+END_SRC
  - After some operators:
    + After the first operand of the logical-and/logical-or operator ~expr1 && expr2~, ~expr1 || expr2~
       #+BEGIN_SRC C++
	 int x = 10;
	 x++ && f(x); // f(x) is guaranteed to be called with 11.
       #+END_SRC
    + After comma operator
       #+BEGIN_SRC C++
	 int x = 10;
	 if (++x, f(x) != 0) {} // f(x) is guaranteed to be called with 11.
       #+END_SRC
   + After the first operand of the ternary operator ~expr1 ? expr2 : expr3~
       #+BEGIN_SRC C++
	 int x = 10;
	 int y = 20;
	 int z = x++ > 9 ? x : y; // z = 11;
       #+END_SRC
